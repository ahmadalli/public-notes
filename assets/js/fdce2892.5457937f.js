"use strict";(self.webpackChunkpublic_notes=self.webpackChunkpublic_notes||[]).push([[7042],{3909:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>s,default:()=>c,frontMatter:()=>a,metadata:()=>o,toc:()=>h});const o=JSON.parse('{"id":"photography-and-cinematography/media-organization","title":"Media Organization","description":"I use Adobe Lightroom Classic to organize my photos and videos. Each device has its own catalog as I don\'t do any work that uses multiple devices and so far, I haven\'t had the need to have a single catalog for all devices. I use the // folder structure when importing files.","source":"@site/docs/0140-photography-and-cinematography/070-media-organization.md","sourceDirName":"0140-photography-and-cinematography","slug":"/photography-and-cinematography/media-organization","permalink":"/photography-and-cinematography/media-organization","draft":false,"unlisted":false,"editUrl":"https://github.com/ahmadalli/public-notes/edit/main/docs/0140-photography-and-cinematography/070-media-organization.md","tags":[],"version":"current","lastUpdatedBy":"ahmadali shafiee","lastUpdatedAt":1746871113000,"sidebarPosition":70,"frontMatter":{},"sidebar":"defaultSidebar","previous":{"title":"DaVinci Resolve","permalink":"/photography-and-cinematography/davinci-resolve"},"next":{"title":"Adobe Lightroom Classic","permalink":"/photography-and-cinematography/lightroom"}}');var r=t(4848),i=t(8453);const a={},s="Media Organization",d={},h=[];function l(e){const n={code:"code",h1:"h1",header:"header",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"media-organization",children:"Media Organization"})}),"\n",(0,r.jsxs)(n.p,{children:["I use Adobe Lightroom Classic to organize my photos and videos. Each device has its own catalog as I don't do any work that uses multiple devices and so far, I haven't had the need to have a single catalog for all devices. I use the ",(0,r.jsx)(n.code,{children:"<Year>/<YYYY-MM-DD>/<file>"})," folder structure when importing files."]}),"\n",(0,r.jsxs)(n.p,{children:["Lightroom doesn't support importing ",(0,r.jsx)(n.code,{children:".srt"})," (for telemetry) and ",(0,r.jsx)(n.code,{children:".lrf"})," (low resolution videos) files that DJI drones create so I use the following PowerShell script, providing ",(0,r.jsx)(n.code,{children:"SourceDir"})," and ",(0,r.jsx)(n.code,{children:"DryRun"})," parameters:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-powershell",children:'# Parameters\nparam(\n  [Parameter(Mandatory = $true)]\n  [string]$SourceDir,\n\n  [Parameter(Mandatory = $true)]\n  [string]$DestDir,\n\n  [switch]$DryRun = $false,\n\n  [switch]$ShaCheck = $false,\n\n  [switch]$Overwrite = $false\n)\n\n# Function to format file size in a human-readable format\nfunction Format-FileSize {\n  param([long]$Size)\n\n  if ($Size -ge 1TB) { return "{0:N2} TB" -f ($Size / 1TB) }\n  elseif ($Size -ge 1GB) { return "{0:N2} GB" -f ($Size / 1GB) }\n  elseif ($Size -ge 1MB) { return "{0:N2} MB" -f ($Size / 1MB) }\n  elseif ($Size -ge 1KB) { return "{0:N2} KB" -f ($Size / 1KB) }\n  else { return "$Size Bytes" }\n}\n\nif ($DryRun) {\n  Write-Host "DRY RUN MODE: No files will be moved" -ForegroundColor Yellow\n}\n\nWrite-Host "Source directory: $SourceDir"\nWrite-Host "Destination directory: $DestDir"\n\n# Verify directories exist\nif (!(Test-Path -Path $SourceDir)) {\n  Write-Host "Error: Source directory does not exist: $SourceDir" -ForegroundColor Red\n  exit 1\n}\n\nif (!(Test-Path -Path $DestDir)) {\n  if ($DryRun) {\n    Write-Host "[DRY RUN] Would create destination directory: $DestDir" -ForegroundColor Cyan\n  }\n  else {\n    Write-Host "Creating destination directory: $DestDir"\n    New-Item -Path $DestDir -ItemType Directory -Force | Out-Null\n  }\n}\n\n$files = Get-ChildItem -Path $SourceDir -File -Recurse\nWrite-Host "Found $($files.Count) files"\n$files | ForEach-Object {\n  $FILE = $_.FullName\n  $MOD_DATE = $_.LastWriteTime.ToString("yyyy-MM-dd")\n  $YEAR = $_.LastWriteTime.Year.ToString()\n  $DEST_PATH = Join-Path -Path $DestDir -ChildPath "$YEAR\\$MOD_DATE"\n\n  # Create destination directory if it doesn\'t exist\n  if (!(Test-Path -Path $DEST_PATH)) {\n    if ($DryRun) {\n      Write-Host "[DRY RUN] Would create directory: $DEST_PATH" -ForegroundColor Cyan\n    }\n    else {\n      New-Item -Path $DEST_PATH -ItemType Directory -Force | Out-Null\n    }\n  }\n\n  $DEST_FILE = Join-Path -Path $DEST_PATH -ChildPath $_.Name\n\n  if (Test-Path -Path $DEST_FILE) {\n    Write-Host "File $FILE already exists in $DEST_PATH\\"\n    Write-Host "Source:"\n    # Get file information\n    $sourceInfo = Get-Item -Path $FILE\n    Write-Host "$($sourceInfo.FullName) $($sourceInfo.LastWriteTime) $(Format-FileSize $sourceInfo.Length)"\n\n    Write-Host "Destination:"\n    $destInfo = Get-Item -Path $DEST_FILE\n    Write-Host "$($destInfo.FullName) $($destInfo.LastWriteTime) $(Format-FileSize $destInfo.Length)"\n\n    if ($sourceInfo.Length -eq $destInfo.Length) {\n      Write-Host "Files are the same size $([char]0x2705)" -ForegroundColor Green\n    }\n    else {\n      Write-Host "Files are different sizes $([char]0x274C)" -ForegroundColor Red\n    }\n\n    if ($ShaCheck) {\n      Write-Host -NoNewline "SHA1: "\n      $source_sha = (Get-FileHash -Path $FILE -Algorithm SHA1).Hash\n      $dest_sha = (Get-FileHash -Path $DEST_FILE -Algorithm SHA1).Hash\n\n      if ($source_sha -eq $dest_sha) {\n        Write-Host "Files are identical $([char]0x2705)" -ForegroundColor Green\n      }\n      else {\n        Write-Host "Files are different $([char]0x274C)" -ForegroundColor Red\n      }\n    }\n\n    if (!$Overwrite) {\n      Write-Host "Do you want to overwrite the file? [y/N] " -NoNewline\n      $key = [System.Console]::ReadKey($true)\n      Write-Host $key.KeyChar\n      $shouldOverwrite = $key.KeyChar -match "[Yy]"\n\n      if (!$shouldOverwrite) {\n        Write-Host "Skipping $FILE"\n        return\n      }\n    }\n    else {\n      Write-Host "Overwrite is set to true, Overwriting $FILE" -ForegroundColor Yellow\n    }\n  }\n\n  if (!$DryRun) {\n    Move-Item -Path $FILE -Destination $DEST_PATH -Force\n    Write-Host "Moved $FILE to $DEST_PATH\\"\n  }\n  else {\n    Write-Host "[DRY RUN] Would move: $FILE -> $DEST_PATH\\" -ForegroundColor Cyan\n  }\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"Alternatively, this is the bash script I used before but had to move to PowerShell since it's hard to access USB drives from WSL2:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'#!/bin/bash\n\n# Directories\nSOURCE_DIR="<source>"\nDEST_DIR="<destination>"\n\nfind "$SOURCE_DIR" -type f | while read -r FILE; do\n  MOD_DATE=$(stat -c "%y" "$FILE" | cut -d\' \' -f1)\n  YEAR=$(echo "$MOD_DATE" | cut -d\'-\' -f1)\n  DEST_PATH="$DEST_DIR/$YEAR/$MOD_DATE"\n  mkdir -p "$DEST_PATH"\n  if [ -f "$DEST_PATH/$(basename "$FILE")" ]; then\n    echo "File $FILE already exists in $DEST_PATH/"\n    echo "Source:"\n    # get file created date and size\n    stat -c "%n %y %z" "$FILE" # TODO: stat doesn\'t print size\n    echo "Destination:"\n    stat -c "%n %y %z" "$DEST_PATH/$(basename "$FILE")"\n    read -p "Do you want to check SHA? [y/N] " -r -n 1 </dev/tty\n    echo\n    if [[ $REPLY =~ ^[Yy]$ ]]; then\n      echo -n "SHA256:"\n      source_sha=$(sha256sum "$FILE" | cut -d\' \' -f1)\n      dest_sha=$(sha256sum "$DEST_PATH/$(basename "$FILE")" | cut -d\' \' -f1)\n      if [ "$source_sha" == "$dest_sha" ]; then\n        echo " Files are identical \u2705"\n      else\n        echo " Files are different \u274c"\n      fi\n    fi\n    read -p "Do you want to overwrite the file? [y/N] " -r -n 1 </dev/tty\n    echo\n    if [[ ! $REPLY =~ ^[Yy]$ ]]; then\n      echo "Skipping $FILE"\n      continue\n    fi\n  fi\n  mv "$FILE" "$DEST_PATH/"\n  echo "Moved $FILE to $DEST_PATH/"\ndone\n'})})]})}function c(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>s});var o=t(6540);const r={},i=o.createContext(r);function a(e){const n=o.useContext(i);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),o.createElement(i.Provider,{value:n},e.children)}}}]);